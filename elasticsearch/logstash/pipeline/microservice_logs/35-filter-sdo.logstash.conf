filter {

  if [log] =~ "^\{.*\}[\s\S]*$" {
    json {
        skip_on_invalid_json => "true"
        source => "log"
        add_tag => [ "json_log_parsed" ]
        remove_field => [ "log" ]
    }
  
    ruby {
      init => "require 'json'"
      code => "
        if !event.get('[responsePayload]').nil? && !event.get('[responsePayload]').empty?
          event.set('[responsePayload]', JSON.pretty_generate(event.get('[responsePayload]')))
        end
        if !event.get('[requestPayload]').nil? && !event.get('[requestPayload]').empty?
          event.set('[requestPayload]', JSON.pretty_generate(event.get('[requestPayload]')))
        end
        "
    }
  }

  if ("json_log_parsed" not in [tags]){
    grok{
      match => { "log" => "%{GREEDYDATA:logtimestamp}\ \[%{GREEDYDATA:level}\] %{GREEDYDATA:message}"}
      remove_field => [ "log" ]
    }
    ruby{
      code => "
        event.set('[message]', event.get('[message]').gsub(/(\tat)/, 10.chr + '\1'))
      "
    }
    date {
      match => [ "[logtimestamp]", "YYYY-MM-dd HH:mm:ss,SSS"]
      timezone => "Europe/Warsaw"
      remove_field => [ "logtimestamp" ]
    }
  }

#  ruby {
#    code => "
#      require 'rexml/document'
#      source = event['message']
#      doc = REXML::Document.new(source)
#      formatter = REXML::Formatters::Pretty.new
#      formatter.compact = true
#      target = ''
#      formatter.write(doc, target)
#      event['xml'] = target
#      "
# }

#  grok{
#    match => { "message" => "(?<logtimestamp>[^|]*)\|(?<level>[^ |]*)[ \t]*\|(?<instance_id>[^|]*)\|(?<session_id>[^|]*)\|(?<user_id>[^|]*)\| \[(?<service_path>[^\]]*)\] %{GREEDYDATA:message_json}"}
#    remove_field => [ "message" ]
#  }
#  
#    json {
#      source => "message_json"
#      target => "message_json"
#    }

#    mutate {
#      rename => { "[message_json][header][referenceId][value]" => "reference_id"
#                  "[message_json][header][operationStatus][value]" => "operation_status"
#                  "[message_json][header][operationType][value]" => "operation_type"
#                 }
#      remove_field => [ "message_json" ]
#    }
#  
#  date {
#    match => [ "[logtimestamp]", "YYYY-MM-dd HH:mm:ss,SSS"]
#    timezone => "Europe/Warsaw"
#    remove_field => [ "logtimestamp" ]
#  }
}
